
var gl;


var points = [vec3(0.0,0.0,0.0)];
var NumSubdivde = 8;

window.onload = function init()
{
	var canvas = document.getElementById("gl-canvas");
	gl = WebGLUtils.setupWebGL(canvas);
	if(!gl)
	{
		alert("WebGL is not Available");
	}
	var vertices = [vec3(-1.0,-1.0, -1.0),vec3(1.0, -1.0, -1.0), vec3(0.0, 1.0, 0.0), vec3(0.0, -1.0, 1.0)];
	
 	divideTriangle(vertices[0], vertices[1], vertices[2], vertices[3], NumSubdivde );
	alert("WebGL is not Available" + points.length );
	
	
	//Configure WebGL
	
	gl.viewport(0,0, canvas.width, canvas.height);
	gl.clearColor(1.0,1.0, 1.0, 1.0);
	
	//load shaders and initialize attribute buffers
	var program = initShaders(gl, "vertex-shader", "fragment-shader");
	gl.useProgram(program);
	
	//load the data into the gpu
	
	var bufferId = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, bufferId);
	gl.bufferData(gl.ARRAY_BUFFER,flatten(points), gl.STATIC_DRAW);
	
	
	//Associate our shader variable with our data bufferData
	
	var vPosition = gl.getAttribLocation(program, "vPosition");
	
	gl.vertexAttribPointer(vPosition, 2, gl.FLOAT, false, 0, 0);
	gl.enableVertexAttribArray(vPosition);
	
	//
	render();
}	


function triangle(a, b, c)
{
	points.push(a);
	points.push(b);
	points.push(c);
}

function tetra(a, b, c, d)
{
	triangle(a, c, b);
	triangle(a, c, d);
	triangle(a, b, d);
	triangle(b, c, d);
}

function divideTriangle(a, b, c, d, count)
{
	
	if(count === 0)
	{
		tetra(a, b, c, d);
	}
	else
	{
		var ab = mix(a, b, 0.5);
		var ac = mix(a, c, 0.5);
		var ad = mix(a, d, 0.5);
		var bc = mix(b, c, 0.5);
		var bd = mix(b, d, 0.5);
		var cd = mix(c, d, 0.5);
		
		--count;
		divideTriangle(a, ab, ac, ad, count);
		divideTriangle(ab, b, bc, bd, count);
		divideTriangle(ac, bc, c, cd, count);
		divideTriangle(ad, bd, cd, d, count);
	
	}
		
}

function render()
{
	gl.clear(gl.COLOR_BUFFER_BIT);
	gl.drawArrays(gl.TRIANGLES, 0,points.length);
}
		

